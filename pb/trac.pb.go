// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trac.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	trac.proto

It has these top-level messages:
	TimePeriod
	Point
	Coordinate
	CoordinateRequest
	Track
	TrackRequest
	WrappedCoordinate
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TimePeriod struct {
	Start *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *google_protobuf2.Timestamp `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *TimePeriod) Reset()                    { *m = TimePeriod{} }
func (m *TimePeriod) String() string            { return proto.CompactTextString(m) }
func (*TimePeriod) ProtoMessage()               {}
func (*TimePeriod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TimePeriod) GetStart() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *TimePeriod) GetEnd() *google_protobuf2.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
type Point struct {
	Latitude  int32 `protobuf:"varint,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Coordinate struct {
	Altitude int32  `protobuf:"varint,1,opt,name=altitude" json:"altitude,omitempty"`
	Point    *Point `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
}

func (m *Coordinate) Reset()                    { *m = Coordinate{} }
func (m *Coordinate) String() string            { return proto.CompactTextString(m) }
func (*Coordinate) ProtoMessage()               {}
func (*Coordinate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Coordinate) GetAltitude() int32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *Coordinate) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type CoordinateRequest struct {
	User int64 `protobuf:"varint,1,opt,name=user" json:"user,omitempty"`
	Id   int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *CoordinateRequest) Reset()                    { *m = CoordinateRequest{} }
func (m *CoordinateRequest) String() string            { return proto.CompactTextString(m) }
func (*CoordinateRequest) ProtoMessage()               {}
func (*CoordinateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CoordinateRequest) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *CoordinateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Track struct {
	Id     int64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Coords []*Coordinate `protobuf:"bytes,2,rep,name=coords" json:"coords,omitempty"`
}

func (m *Track) Reset()                    { *m = Track{} }
func (m *Track) String() string            { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()               {}
func (*Track) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Track) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Track) GetCoords() []*Coordinate {
	if m != nil {
		return m.Coords
	}
	return nil
}

type TrackRequest struct {
	User int64 `protobuf:"varint,1,opt,name=user" json:"user,omitempty"`
	// oneof trackfilter {
	Period *TimePeriod `protobuf:"bytes,2,opt,name=period" json:"period,omitempty"`
	Track  string      `protobuf:"bytes,3,opt,name=track" json:"track,omitempty"`
}

func (m *TrackRequest) Reset()                    { *m = TrackRequest{} }
func (m *TrackRequest) String() string            { return proto.CompactTextString(m) }
func (*TrackRequest) ProtoMessage()               {}
func (*TrackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TrackRequest) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *TrackRequest) GetPeriod() *TimePeriod {
	if m != nil {
		return m.Period
	}
	return nil
}

func (m *TrackRequest) GetTrack() string {
	if m != nil {
		return m.Track
	}
	return ""
}

type WrappedCoordinate struct {
	User           int64                       `protobuf:"varint,1,opt,name=user" json:"user,omitempty"`
	Id             int64                       `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Coord          *Coordinate                 `protobuf:"bytes,3,opt,name=coord" json:"coord,omitempty"`
	TimestampValue *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=timestamp_value,json=timestampValue" json:"timestamp_value,omitempty"`
	Track          string                      `protobuf:"bytes,5,opt,name=track" json:"track,omitempty"`
}

func (m *WrappedCoordinate) Reset()                    { *m = WrappedCoordinate{} }
func (m *WrappedCoordinate) String() string            { return proto.CompactTextString(m) }
func (*WrappedCoordinate) ProtoMessage()               {}
func (*WrappedCoordinate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WrappedCoordinate) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *WrappedCoordinate) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WrappedCoordinate) GetCoord() *Coordinate {
	if m != nil {
		return m.Coord
	}
	return nil
}

func (m *WrappedCoordinate) GetTimestampValue() *google_protobuf2.Timestamp {
	if m != nil {
		return m.TimestampValue
	}
	return nil
}

func (m *WrappedCoordinate) GetTrack() string {
	if m != nil {
		return m.Track
	}
	return ""
}

func init() {
	proto.RegisterType((*TimePeriod)(nil), "trac.TimePeriod")
	proto.RegisterType((*Point)(nil), "trac.Point")
	proto.RegisterType((*Coordinate)(nil), "trac.Coordinate")
	proto.RegisterType((*CoordinateRequest)(nil), "trac.CoordinateRequest")
	proto.RegisterType((*Track)(nil), "trac.Track")
	proto.RegisterType((*TrackRequest)(nil), "trac.TrackRequest")
	proto.RegisterType((*WrappedCoordinate)(nil), "trac.WrappedCoordinate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Trac service

type TracClient interface {
	Post(ctx context.Context, in *WrappedCoordinate, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetLast(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*Coordinate, error)
	Get(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*Track, error)
}

type tracClient struct {
	cc *grpc.ClientConn
}

func NewTracClient(cc *grpc.ClientConn) TracClient {
	return &tracClient{cc}
}

func (c *tracClient) Post(ctx context.Context, in *WrappedCoordinate, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/trac.Trac/Post", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracClient) GetLast(ctx context.Context, in *CoordinateRequest, opts ...grpc.CallOption) (*Coordinate, error) {
	out := new(Coordinate)
	err := grpc.Invoke(ctx, "/trac.Trac/GetLast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracClient) Get(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*Track, error) {
	out := new(Track)
	err := grpc.Invoke(ctx, "/trac.Trac/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trac service

type TracServer interface {
	Post(context.Context, *WrappedCoordinate) (*google_protobuf1.Empty, error)
	GetLast(context.Context, *CoordinateRequest) (*Coordinate, error)
	Get(context.Context, *TrackRequest) (*Track, error)
}

func RegisterTracServer(s *grpc.Server, srv TracServer) {
	s.RegisterService(&_Trac_serviceDesc, srv)
}

func _Trac_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrappedCoordinate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trac.Trac/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracServer).Post(ctx, req.(*WrappedCoordinate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trac_GetLast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoordinateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracServer).GetLast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trac.Trac/GetLast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracServer).GetLast(ctx, req.(*CoordinateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trac_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trac.Trac/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracServer).Get(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Trac_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trac.Trac",
	HandlerType: (*TracServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _Trac_Post_Handler,
		},
		{
			MethodName: "GetLast",
			Handler:    _Trac_GetLast_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Trac_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trac.proto",
}

func init() { proto.RegisterFile("trac.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x8a, 0xd4, 0x4e,
	0x10, 0xc7, 0xc9, 0xbf, 0xf9, 0xed, 0xd6, 0xfc, 0xdc, 0x75, 0xca, 0x65, 0x77, 0x88, 0x03, 0x8e,
	0x7d, 0x90, 0x20, 0x92, 0xe8, 0x78, 0x10, 0xbc, 0xe9, 0x2a, 0x7b, 0x70, 0x85, 0x21, 0x0c, 0x0a,
	0x5e, 0xa4, 0x67, 0xd2, 0x0e, 0xcd, 0x66, 0xd2, 0x31, 0xe9, 0x2c, 0x88, 0x78, 0xf1, 0x15, 0x7c,
	0x1b, 0x5f, 0xc3, 0x57, 0xf0, 0xe2, 0x5b, 0x48, 0xff, 0xc9, 0x24, 0x3a, 0xe2, 0x7a, 0x4b, 0xf7,
	0xb7, 0xea, 0x53, 0xf5, 0xad, 0xea, 0x00, 0xc8, 0x8a, 0xae, 0xe2, 0xb2, 0x12, 0x52, 0xa0, 0xaf,
	0xbe, 0xc3, 0xc9, 0x5a, 0x88, 0x75, 0xce, 0x12, 0x5a, 0xf2, 0x84, 0x16, 0x85, 0x90, 0x54, 0x72,
	0x51, 0xd4, 0x26, 0x26, 0xbc, 0x69, 0x55, 0x7d, 0x5a, 0x36, 0xef, 0x12, 0xb6, 0x29, 0xe5, 0x07,
	0x2b, 0xde, 0xfa, 0x5d, 0x94, 0x7c, 0xc3, 0x6a, 0x49, 0x37, 0xa5, 0x09, 0x20, 0x39, 0xc0, 0x82,
	0x6f, 0xd8, 0x9c, 0x55, 0x5c, 0x64, 0x78, 0x1f, 0x82, 0x5a, 0xd2, 0x4a, 0x8e, 0x9d, 0xa9, 0x13,
	0x0d, 0x67, 0x61, 0x6c, 0xd2, 0xe3, 0x36, 0x3d, 0x5e, 0xb4, 0xe9, 0xa9, 0x09, 0xc4, 0x7b, 0xe0,
	0xb1, 0x22, 0x1b, 0xbb, 0x57, 0xc6, 0xab, 0x30, 0xf2, 0x04, 0x82, 0xb9, 0xe0, 0x85, 0xc4, 0x10,
	0xf6, 0x72, 0x2a, 0xb9, 0x6c, 0x32, 0xa6, 0x6b, 0x05, 0xe9, 0xf6, 0x8c, 0x13, 0xd8, 0xcf, 0x45,
	0xb1, 0x36, 0xa2, 0xab, 0xc5, 0xee, 0x82, 0xbc, 0x00, 0x38, 0x15, 0xa2, 0xca, 0x78, 0x41, 0x25,
	0x53, 0x1c, 0x9a, 0xff, 0xca, 0x69, 0xcf, 0x78, 0x1b, 0x82, 0x52, 0x15, 0xb3, 0xcd, 0x0d, 0x63,
	0x3d, 0x58, 0x5d, 0x3f, 0x35, 0x0a, 0x79, 0x04, 0xa3, 0x0e, 0x96, 0xb2, 0xf7, 0x0d, 0xab, 0x25,
	0x22, 0xf8, 0x4d, 0xcd, 0x2a, 0xcd, 0xf3, 0x52, 0xfd, 0x8d, 0x07, 0xe0, 0x72, 0xe3, 0xd2, 0x4b,
	0x5d, 0xae, 0x8d, 0x2c, 0x2a, 0xba, 0xba, 0xb0, 0x82, 0xd3, 0x0a, 0x18, 0xc1, 0x60, 0xa5, 0x88,
	0xf5, 0xd8, 0x9d, 0x7a, 0xd1, 0x70, 0x76, 0xdd, 0x54, 0xed, 0x55, 0xb1, 0x3a, 0x59, 0xc2, 0xff,
	0x1a, 0xf1, 0xb7, 0xb2, 0x11, 0x0c, 0x4a, 0xbd, 0x19, 0xeb, 0xc1, 0xd2, 0xba, 0x8d, 0xa5, 0x56,
	0xc7, 0x23, 0x08, 0x94, 0x74, 0x31, 0xf6, 0xa6, 0x4e, 0xb4, 0x9f, 0x9a, 0x03, 0xf9, 0xea, 0xc0,
	0xe8, 0x75, 0x45, 0xcb, 0x92, 0x65, 0xbd, 0xa1, 0xfd, 0x83, 0x41, 0xbc, 0x03, 0x81, 0xee, 0x53,
	0xf3, 0xfe, 0x64, 0xc3, 0xc8, 0x78, 0x0a, 0x87, 0xdb, 0x27, 0xf5, 0xf6, 0x92, 0xe6, 0x0d, 0x1b,
	0xfb, 0x57, 0xbe, 0x85, 0x83, 0x6d, 0xca, 0x2b, 0x95, 0xd1, 0x35, 0x1f, 0xf4, 0x9a, 0x9f, 0xfd,
	0x70, 0xc0, 0x57, 0x13, 0xc2, 0x73, 0xf0, 0xe7, 0xa2, 0x96, 0x78, 0x62, 0x9a, 0xd8, 0x31, 0x14,
	0x1e, 0xef, 0xd4, 0x7a, 0xae, 0xfe, 0x01, 0x72, 0xe3, 0xf3, 0xb7, 0xef, 0x5f, 0xdc, 0x6b, 0x64,
	0x2f, 0xb9, 0x7c, 0x90, 0xa8, 0xdc, 0xc7, 0xce, 0x5d, 0x7c, 0x09, 0xff, 0x9d, 0x31, 0x79, 0x4e,
	0x3b, 0xe0, 0xce, 0x13, 0x08, 0x77, 0xec, 0x92, 0x13, 0x8d, 0x1a, 0xe1, 0x61, 0x8b, 0x4a, 0x3e,
	0xaa, 0xb9, 0x7d, 0xc2, 0x67, 0xe0, 0x9d, 0x31, 0x89, 0x68, 0x37, 0xd3, 0xdb, 0x68, 0x38, 0xec,
	0xdd, 0x91, 0x89, 0x06, 0x1c, 0xe3, 0xd1, 0x16, 0x90, 0xf3, 0x5a, 0x5a, 0xca, 0x53, 0xff, 0x8d,
	0x5b, 0x2e, 0x97, 0x03, 0xdd, 0xff, 0xc3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xb8, 0xf5,
	0x3e, 0x03, 0x04, 0x00, 0x00,
}
